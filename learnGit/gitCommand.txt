git clone git@github.com:samuelmk2/mySpace.git
git pull origin master
git push origin master

一.常用命令：
git init
初始化git仓库

git add 
当对工作区修改（或新增）的文件执行git add命令时，暂存区的目录树将被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。

git commit
当执行提交操作（git commit）时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。

git checkout <file> 
清除工作区file文件中不打算提交的所有修改（即恢复）。

***********************************************************************************************************************
git reset命令(重要)：
git reset  <paths>
git reset HEAD <paths> (效果同上)
相当于取消之前执行的git add <paths>命令时改变的暂存区。

三个参数：--hard，--soft，--mixed(默认)
使用参数：--hard，如： git reset --hard <commit>，效果:
(1).替换引用的指向，引用指向新的提交ID.
(2).替换暂存区，替换后，暂存区的内容和引用指向的目录树一致。
(3).替换工作区，替换后，工作区的内容变得和暂存区一致，也和HEAD所指向的目录树内容相同。

使用参数：--soft，如： git reset --soft <commit>，效果:
(1).只改变引用的指向，不改变暂存区和工作区。

使用参数：--mixed或不使用参数(默认为--mixed)，如： git reset <commit>，效果:
(1).替换引用的指向，引用指向新的提交ID.
(2).替换暂存区，替换后，暂存区的内容和引用指向的目录树一致。但不改变工作区。

一些命令的例子：
git reset (或是：git reset HEAD)
仅用HEAD指向的目录树重置暂存区，工作区不会受影响，相当于将之前用git add 命令更新到暂存区的内容撤出暂存区。引用页未改变，因为引用重置到HEAD相当于没有重置。

git reset filename (或是：git reset HEAD filename)
仅将文件filename的改动撤出暂存区，暂存区中其他文件不改变。相当于对命令git add filename的反向操作。

git reset --soft HEAD^
工作区和暂存区不改变，但是引用向前回退一次。当对最新提交的提交说明或提交的更改不满意时，撤销最近的提交以便重新提交。

git reset HEAD^ (或是：git reset --mixed HEAD^)
工作区不改变，但是暂存区会回退到上一次提交之前，引用也会回退一次。

git reset --hard HEAD^
彻底撤销最近的提交。引用回退到前一次，而且工作区和暂存区都会回退到上一次提交的状态。自上一次以来的提交全部丢失。
************************************************************************************************************************

二.其他命令：
git --help

git help COMMAND 
查看具体COMMAND的用法，如：git help diff

git grep  "文件内容搜索"
搜索工作区内的文件内容。

git commit --amend --allow-empty
--amend参数可对之前提交时的信息做修补，
--allow-empty参数可允许空白内容提交

git diff 比较工作区和提交暂存区的代码差异
git diff HEAD 比较工作区和本地版本库（HEAD）的代码差异
git diff --cached (or --staged) 比较提交暂存区和本地版本库的代码差异

git stash
保存工作进度（包括工作区和暂存区）

git config --global color.ui true
git着色

三.重要概念：
1.暂存区(stage 或称为 index)

2.HEAD实际上是一个指向本地版本库master分支的一个"指针"
