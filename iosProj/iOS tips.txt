
xcode operation tip:
1.control+command+up :在.h和.m文件之间切换

2.注意：使用格式化的注释 // TODO：可以帮助Xcode找到需要以后完成的代码。你还可以使用 Show Document Items(Control-6)来查看TODO项。 

3.使用#pragma mark来组织代码

4.有时候我们的程序不知道跑到哪个地方就 crash 了，而 crash 又很难重现。保守的做法是在系统抛出异常之前设置断点，具体来说是在 objc_exception_throw处设置断点。
设置步骤为：首先在 XCode 按 CMD + 6，进入断点管理窗口；然后点击左下方的 +，增加新的 Symbolic Breakpoint，在 Symbol 一栏输入：objc_exception_throw，然后点击 done，完成。 
这样在 Debug 模式下，如果程序即将抛出异常，就能在抛出异常处中断了。

5.ios模拟器的路径－打开沙盒路径
这种方法更方便，在Finder上点->前往->前往文件夹，输入/Users/username/Library/Application Support/iPhone Simulator/  前往。
username这里写你的用户名。

6.设置显示隐藏文件方法：
在终端输入命令：defaults write com.apple.finder AppleShowAllFiles -bool true然后重启下finder。 


7. svn lock 时命令行解决办法：
$ cd /my/repository(根目录)/.svn
$ mv wc.db wc.db.old
$ sqlite3 wc.db.old
sqlite> .backup main wc.db
sqlite> .exit

之后在根目录下执行svn cleanup





objective c learning & improvment
1. category原理：
对象的方法定义都保存在类的可变区域中。Objective-C 2.0并未在头文件中将实现暴露出来，但在Objective-C 1.0中，我们可以看到方法的定义列表是一个名为 methodLists的指针的指针。
通过修改该指针指向的指针的值，就可以实现动态地为某一个类增加成员方法。这也是Category实现的原理。同时也说明了为什么Category只可为对象增加成员方法，却不能增加成员变量。

2. 








ios tips:

1.property vs instance variable

Setter methods can have additional side-effects. They may trigger KVC notifications, or perform further tasks if you write your own custom methods.
You should always access the instance variables directly from within an initialization method because at the time a property is set, the rest of the object may not yet be completely initialized. Even if you don’t provide custom accessor methods or know of any side effects from within your own class, a future subclass may very well override the behavior.

LLVM编译器自动综合所有属性，因此不再需要为属性写明@synthesize语句。当一个属性被综合时，就会创建accessors，允许你设置或者获得属性的值。尽管你可能不会看到它们，因为它们是在构建时创建的，但是一对getter/setter可以显示为：
- (BOOL)finished 
{  
    return _finished; 
} 
 
- (void)setFinished:(BOOL)aValue 
{  
    _finished = aValue; 
} 
也就是说，llvm之后，不用自己声明_实例变量了，系统自动合成。



2. problems like strong reference cycles, which lead to memory leaks.


3.使用Block的好处有：
Block可以用在许多不同的环境中，这样可以让代码更加简单，以及减少函数声明的数量，不用实现代理协议。
简单性：使用 Block 我们可以不写任何附加的代码就可以访问对象，对象在数组中的索引，stop 变量。 这意味着少量的代码，减少了发生编码错误的机会(当然，并非我们一定会出现编码错误)。
速度：使用 Block 在执行速度上要比使用快速枚举快。 在我们这个例子中，这点微小的速度提升不值得一提，但是在更复杂的情况下，这个优势就越来越重要。
更简单的代码：使用 Block， 我们不再需要单独定义一个回调方法，保持代码在一起。使用 Block, 我们不再需要在一个地方开启动画，然后再另外一个地方处理回调。 所有和我们动画相关的代码都在一处，这样让他的可读性和维护性更强。
适用作工作单元，通常用来做并发任务、遍历、排序、以及回调。 

4.从iOS 5开始，UIViewController中引入了viewWillLayoutSubviews来调整布局。其中几个方法的调用顺序依次是：
viewDidLoad->viewWillAppear->viewWillLayoutSubviews->viewDidAppear

5,您可能之前没有见过的@import指令，它在Xcode5中被引入，是由苹果公司看作是一个现代的，更高效的替代 #import。
有一个非常好的教程，涵盖了最新的Objective-C特性-[What’s New in Objective-C and Foundation in iOS 7](http://www.raywenderlich.com/49850/whats-new-in-objective-c-and-foundation-in-ios-7)。 


6.在Objective-c中，当一个类需要引用另一个类，即建立复合关系的时候，需要在类的头文件中建立被引用类的指针。 如：
Car.h

#import
@interface Car:NSObject
{
Tire *tires[4];
Engine *engine;
}
…
实现类我们先省略，如果你直接这么编译，编译器会报错，告诉你它不知道Tire和Engine是什么。

这时候有两个选择，一个是import这两个被引用类的头文件，另一个是使用@class声明Tire和Engine是类名。 二者的区别在于：

import会包含这个类的所有信息，包括实体变量和方法，而@class只是告诉编译器，其后面声明的名称是类的名称，至于这些类是如何定义的，暂时不用考虑，后面会再告诉你。
在头文件中， 一般只需要知道被引用的类的名称就可以了。 不需要知道其内部的实体变量和方法，所以在头文件中一般使用@class来声明这个名称是类的名称。 而在实现类里面，因为会用到这个引用类的内部的实体变量和方法，所以需要使用#import来包含这个被引用类的头文件。
在编译效率方面考虑，如果你有100个头文件都#import了同一个头文件，或者这些文件是依次引用的，如A–>B, B–>C, C–>D这样的引用关系。当最开始的那个头文件有变化的话，后面所有引用它的类都需要重新编译，如果你的类有很多的话，这将耗费大量的时间。而是用 @class则不会。
如果有循环依赖关系，如:A–>B, B–>A这样的相互依赖关系，如果使用#import来相互包含，那么就会出现编译错误，如果使用@class在两个类的头文件中相互声明，则不会有编译错误出现。
所以，一般来说，@class是放在interface中的，只是为了在interface中引用这个类，把这个类作为一个类型来用的。 在实现这个接口的实现类中，如果需要引用这个类的实体变量或者方法之类的，还是需要import在@class中声明的类进来.

如：
a.h

@class Rectangle;
@interface A : NSObject {
…
}
a.m

#import Rectangle
@implementation A
…

7.
有时候我们的程序不知道跑到哪个地方就 crash 了，而 crash 又很难重现。保守的做法是在系统抛出异常之前设置断点，具体来说是在 objc_exception_throw处设置断点。
设置步骤为：首先在 XCode 按 CMD + 6，进入断点管理窗口；然后点击左下方的 +，增加新的 Symbolic Breakpoint，在 Symbol 一栏输入：objc_exception_throw，然后点击 done，完成。 
这样在 Debug 模式下，如果程序即将抛出异常，就能在抛出异常处中断了。

8.ios设备唯一标识获取策略
http://blog.csdn.net/iitvip/article/details/10064167
从iOS7及更高版本往后，如果你向ios设备请求获取mac地址，系统将返回一个固定值“02:00:00:00:00:00”，如果你需要识别设备的 唯一性，请使用UIDevice的identifierForVendor属性。（因广告目的而需要识别设备的应用，请考虑使用 ASIdentifierManager的advertisingIdentifier属性作为替代）

9.block
闭包就是能够读取其它函数内部变量的函数。
http://www.cnblogs.com/ymonke/p/3511304.html
http://www.dahuangphone.com/dv_rss.asp?s=xhtml&boardid=8&id=85&page=3


10.ios模拟器的路径－打开沙盒路径
这种方法更方便，在Finder上点->前往->前往文件夹，输入/Users/username/Library/Application Support/iPhone Simulator/  前往。
username这里写你的用户名。


11.
[NSString stringWithFormat:@"%d",indexPath.row]

12. learn：
1. 忘掉界面编辑器
2. 弄清楚AppDelegate是怎么成为app入口的，怎么通过self.window.rootViewController赋值启动第一个主窗口
3. 弄清楚UIView的控件堆砌/去除方法addChild和removeFromParent之类，稍微了解一下View和Controller的关系
4. 弄清楚UIView控制外观位置大小的一般盒模型frame/bounds/anchorPoint/position，注意有些属性在uiview.layer里，虽然我多半都在用frame。以及放缩旋转必须用transform，没现成的属性可以用。
5. 一般的非容器具体控件具体属性自己看文档，只是建议留神一下UIButton的title和image都要用set方法，没有直接的=方法可以用来赋值，就是为了在不同状态下设置不同的东西，以及控制Button上面的image大小写法特别扭曲（要设置inset值），很多时候不如直接addChild一个UIImageView
6. 容器控件UIScrollerVie和UITableView要了解设置代理，填充数据，响应滚动事件的写法。UITableView的古怪之处是要给它一个类让他可以用那个类新建单行控件。
7. 弄清楚UINavigationController的Push/Pop怎么用，怎么手写代码向Navigation上增加按钮，UiTabbarController作为界面容器其实也差不多但现在用的不多了。
8. 现在可以学一下UIView animateWithDuration方法的妙处了，各种华丽精美的，特别苹果范儿的小动画都要靠这玩意实现。
最后. 不知道swift教程讲不讲arc，不如学一下，了解一下这个体系内部的内存管理模式挺好的，delegate用多了迟早会用得到的weak指针的。

13. 图片拉伸
-(void) setImagesforStatesNormal:(NSString*) normalImg highlighted:(NSString*) highlightedImg disabled:(NSString*)disabledImg{
    
    CGPoint  pt = CGPointMake(4, 4);
    if (normalImg) {
        UIImage* imgn = [[UIImage imageNamed:normalImg] resizableImageWithCapInsets:UIEdgeInsetsMake(pt.x,pt.y,pt.x,pt.y)];
        [self setBackgroundImage:imgn forState:UIControlStateNormal];
    }
    if (highlightedImg) {
        UIImage* imgh = [[UIImage imageNamed:highlightedImg] resizableImageWithCapInsets:UIEdgeInsetsMake(pt.x,pt.y,pt.x,pt.y)];
        [self setBackgroundImage:imgh forState:UIControlStateHighlighted];
    }
    if (disabledImg) {
        UIImage* imgd = [[UIImage imageNamed:disabledImg] resizableImageWithCapInsets:UIEdgeInsetsMake(pt.x,pt.y,pt.x,pt.y)];
        [self setBackgroundImage:imgd forState:UIControlStateDisabled];
    }
}

or:
 [self setBackground:[[UIImage imageNamed:normalImg] resizableImageWithCapInsets:UIEdgeInsetsMake(7,7,7,7)]];


14.先执行init、然后执行viewDidLoad，然后是viewWillAppear最后是viewDidAppear


15.动画：
    [UIView animateWithDuration:0.25 animations:^{
        //do something
    }];
    
    //延迟0.5秒再显示动画
    [UIView animateWithDuration:0.25 delay:0.5 options:0 animations:^{
        //do something
    } completion:nil];
属于block动画，参考：http://my.oschina.net/aofe/blog/270412


16. UITableView 相关
(1) cell点击后跳到另外的视图中然后再回来，去掉cell的点击状态
tabview 提供了取消选中的方法
tableview: didselectRowAtIndexPath: 这个是你用来跳转的实现代理
在这个方法里面，最后添加一句，
tableview deselectRowAtIndexPath:indexPath animated:YES

(2) 设置cell背景颜色，兼容ios6
cell.contentView.backgroundColor 

(3) cell无法点击
cell.userInteractionEnabled = FALSE;


17. ios7
#ifndef IOS7
    #define IOS7 [[[UIDevice currentDevice] systemVersion] floatValue] >= 7.0
#endif

18. 单例
+ (instancetype)sharedInstance
{
    static dispatch_once_t once;
    static id sharedInstance;
    dispatch_once(&once, ^{
        sharedInstance = [[self alloc] init];
    });
    return sharedInstance;
}

19.view navigationController stack:
 if([self.navigationController.topViewController isKindOfClass:[IHLoginViewController class]])


20.判断设备是ipad
#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) // 同理，UIUserInterfaceIdiomPhone 即是判断是否是 iPhone


21.从字符串中获得其中的数字
    NSString *str= @"bla bla bla #123 bla bla 789";
    NSMutableString *newStr = [[NSMutableString alloc] init];;
    int j = [str length];
    for (int i=0; i<j; i++) {       
        if ([str characterAtIndex:i] >=48 && [str characterAtIndex:i] <=59) {
            [newStr appendFormat:@"%c",[str characterAtIndex:i]];
        }               
    }

    NSLog(@"%@  as int:%i", newStr, [newStr intValue]);


22. 根据字符串长度计算label的frame高度。
use the NSString method sizeWithFont:constrainedToSize:lineBreakMode: to calculate the frame height needed to fit a string, then sets the origin and width.
Resize the frame for the label using the text you want to insert. That way you can accommodate any number of lines.

CGSize maximumSize = CGSizeMake(300, 9999);
NSString *dateString = @"The date today is January 1st, 1999";
UIFont *dateFont = [UIFont fontWithName:@"Helvetica" size:14];
CGSize dateStringSize = [dateString sizeWithFont:dateFont 
        constrainedToSize:maximumSize 
        lineBreakMode:self.dateLabel.lineBreakMode];

CGRect dateFrame = CGRectMake(10, 10, 300, dateStringSize.height);
self.dateLabel.frame = dateFrame;


23. sizeToFit
http://stackoverflow.com/questions/1054558/vertically-align-text-within-a-uilabel/1054681#1054681


24. 方法flashScrollIndicators：这个很有用，闪一下滚动条，暗示是否有可滚动的内容。可以在ViewDidAppear或[table reload]之后调用。


25. 点击Cell中的按钮时，如何取所在的Cell：

-(void)OnTouchBtnInCell:(UIButton *)btn 
{ 
CGPoint point = btn.center; 
point = [table convertPoint:point fromView:btn.superview]; 
NSIndexPath* indexpath = [table indexPathForRowAtPoint:point]; 
UITableViewCell *cell = [table cellForRowAtIndexPath:indexpath]; 
... 
//也可以通过一路取btn的父窗口取到cell，但如果cell下通过好几层subview才到btn,就要取好几次 superview,所以我用上面的方法，比较通用。这种方法也适用于其它控件。 
} 


26.
//将图片保存到本地
+ (void)SaveImageToLocal:(UIImage*)image Keys:(NSString*)key {
    NSUserDefaults* preferences = [NSUserDefaults standardUserDefaults];
    //[preferences persistentDomainForName:LocalPath];
    [preferences setObject:UIImagePNGRepresentation(image) forKey:key];
}
 
//本地是否有相关图片
+ (BOOL)LocalHaveImage:(NSString*)key {
    NSUserDefaults* preferences = [NSUserDefaults standardUserDefaults];
    //[preferences persistentDomainForName:LocalPath];
    NSData* imageData = [preferences objectForKey:key];
    if (imageData) {
        return YES;
    }
    return NO;
}
 
//从本地获取图片
+ (UIImage*)GetImageFromLocal:(NSString*)key {
    NSUserDefaults* preferences = [NSUserDefaults standardUserDefaults];
    //[preferences persistentDomainForName:LocalPath];
    NSData* imageData = [preferences objectForKey:key];
    UIImage* image;
    if (imageData) {
        image = [UIImage imageWithData:imageData];
    }
    else {
        NSLog(@"未从本地获得图片");
    }
    return image;
}


27. 使用[[UIApplication sharedApplication] openURL:]加载其它应用
http://blog.csdn.net/jslsblog/article/details/9931381


28. 将字符串中的数字提取出来 NSScanner
NSString *str = @"98741235你好";
NSScanner *scanner = [NSScanner scannerWithString:str];
[scanner scanUpToCharactersFromSet:[NSCharacterSet decimalDigitCharacterSet] intoString:nil];
int number;
[scanner scanInt:&number;];
NSLog(@"number : %d", number);

输出结果：98741235
相关链接：http://www.2cto.com/kf/201312/267255.html


29.
之前在面试过程中，发现一些面试者对深浅拷贝、可变不可变拷贝的理解有问题，后来在网上也发现有很多误导性的文章，这里总结了一下。
附上demo，下面的内容围绕这个demo来实现。 

在最开始，我们需要清楚一些关于内存分配方式的基础知识。
一般来说分为栈、堆、静态变量存储区、全局变量存储区、代码区。
前两个大家都懂的。通常将后三个合并称之为静态存储区，存储的是一些全局变量、静态变量、常量、执行代码等。
在Objective-C中，不可变数组、不可变字典以及一些常量字符串，都是分配在这个区域的，我们先要明确这一点。
所以在提到深浅拷贝的时候，用NSArray举例子的，只能说对内存分配方式就不清楚，因为对一个不可变数组进行copy、mutableCopy操作，它实际上返回的是一个对象，
跟深浅拷贝无关，因为都是按照retain来处理的。这也就是很多所谓教程提到的指针拷贝。

下面先说一下可变拷贝和不可变拷贝，分别遵循NSCopying和NSMutableCopying协议，需要对应实现copyWithZone:方法和mutableCopyWithZone:方法。
分两种情况来讲，一种是系统容器类，一种是自定义类。
一、系统容器类。
例如NSArray、NSDictionary，它们已经实现了上面两个协议。
对于它们来说，规则很简单，obj2 = [obj1 copy]返回的必然是一个不可变对象，无论obj1是可变对象还是不可变对象。如果obj1是一个不可变对象，那么它们指向同一个对象，也是上一条我提到过的。
obj2 = [obj1 mutableCopy]返回的必然是一个可变对象，无论obj1是可变对象还是不可变对象。即使obj1也是一个可变对象，它们仍指向不同地址，是两个对象。
二、自定义类。
因为copyWithZone:和mutableCopyWithZone:完全由自己来实现，所以代码的不同实现方式，决定了返回对象是什么。
在demo中Element类的copyWithZone:有注释，感兴趣的可以参考一下。
极端一点的例子，例如你直接在copyWithZone:方法中return self；那么obj2 = [obj1 copy]相当于obj2 = obj1，只是一个assign，没有做任何其它操作。 

下面着重说一下浅拷贝和深拷贝。
首先顾名思义，无论是浅拷贝还是深拷贝，都有一个拷贝在里面，那些说浅拷贝相当于retain、什么所谓指针拷贝的，建议还是不要误人子弟了好吧。
这里我们以NSMutableArray为例
NSMutableArray *element = [NSMutableArray arrayWithObject:@1];
NSMutableArray *array = [NSMutableArray arrayWithObject:element];

id mutableCopyArray = [array mutableCopy];
这一句代码就是浅拷贝，是拷贝了容器自身，返回了一个新的可变数组，指向不同的内存地址。
内部的元素依然是公用的，也就是说，mutableCopyArray[0]也指向element，[mutableCopyArray[0] addObject:***]会影响到array的结果。

id deepMutableCopyArray = [array test_deepMutableCopy];
这一句代码对应的实现是深拷贝，首先它也拷贝了容器自身，返回了一个新的可变数组，指向不同的内存地址。
其次，对内部的元素也进行了拷贝动作，也就是说deepMutableCopyArray[0]是一个新的可变数组，和原来的element是两个数组，修改[deepMutableCopyArray[0] addObject:***]并不会影响到array的结果。

上面这些代码在demo中有，感兴趣或者抱怀疑态度的，可以运行了试试或者加一些log来分析结果。
        
demo及原帖：http://www.cocoachina.com/bbs/read.php?tid-323045-page-1.html

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝


Jenkins：
http://jenkins-ci.org/content/thank-you-downloading-os-x-installer



Google mirror:
第一个: http://www.gfsoso.com/

第二个：https://google.global.ssl.fastly.net/

第三个：http://www.glgoo.com/

第四个：http://64.233.183.163/

第五个：http://201.86.233.217/


https://g.eeload.com/    常用。。。


new:
https://google-hk.wewell.net/
https://google-tw.wewell.net/
https://google-jp.wewell.net/
https://google-kr.wewell.net/

梯子：
https://www.20060602.tk/user


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
level up
http://www.cocoachina.com/ios/20150120/10946.html
http://www.cocoachina.com/programmer/20150123/11009.html   独立开发者
http://www.cocoachina.com/ios/20150111/10894.html   学习资料整理
http://www.zhihu.com/question/22914651    github上值得关注学习的iOS项目
http://www.zhihu.com/question/20016551    系统学习iOS   19楼回答
http://www.imooc.com/article/1467   自学 iOS 开发的一些经验（介绍了很多好的资源）



https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010853    auto layout

http://objccn.io/issue-12-1/   动画解释
https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html    core animation



一些pdf地址：
https://maniacdev.com/cheatsheetobjccd.pdf    oc关键字 cheat sheet


github 优秀库：
https://github.com/ReactiveCocoa/ReactiveCocoa
https://github.com/MengTo/Spring    spring动画

http://github.ibireme.com/github/list/ios/      github－ios 备忘录
https://www.zhihu.com/question/22914651      GitHub 上都有哪些值得关注学习的 iOS 开源项目？
http://www.cocoachina.com/ios/20150727/12720.html      27个提升效率的iOS开源库推荐
http://www.cocoachina.com/bbs/read.php?tid=239175   快速集成下拉刷新--MJRefresh


about design：
http://www.ui.cn/project.php?id=26753
http://cubic-bezier.com/#.09,-0.28,.83,.84
https://unsplash.com      设计网站
http://www.hellorf.com    设计网站－low
http://www.iconpng.com/   icon图标


工具相关：
sketch：
https://twitter.com/MengTo/favorites  需翻墙
http://www.sketchappsources.com  
http://www.sketchcn.com/sketch-chinese-user-manual.html    sketch中文用户手册

程序员如何优雅滴使用mac
http://www.zhihu.com/question/20873070

Mac 开发配置手册
http://www.jianshu.com/p/a2fc4631910c?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io

Homebrew：osx 神器
http://brew.sh/index_zh-cn.html  

代替系统terminal的优秀软件：iterm2
http://www.iterm2.com

神级代码编辑器 Sublime Text 
http://www.cocoachina.com/programmer/20150715/12550.html

https://emacsformacosx.com/     emacs

https://github.com/samuelly/lantern    lantern





面试相关：
https://www.evernote.com/shard/s576/sh/7e58b450-1abe-43a8-bf82-fbf07f1db13c/049802174415b418a2e65f75b744ab72   很不错的帖子

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
swift学习
http://www.cocoachina.com/special/swift/  swift专题页
https://github.com/ipader/SwiftGuide     Swift语言主流学习资源
http://zoltan.co/work/swift.html
https://itunes.apple.com/cn/course/developing-ios-8-apps-swift/id961180099    swift stanford lesson
http://www.infoq.com/cn/articles/multi-paradigm-programming-language-swift   从各种编程范式的角度介绍了swift
http://www.cocoachina.com/ios/20150906/13318.html    Swift学习: 从Objective-C到Swift
https://github.com/apple/swift      swift开源地址
https://swift.org/documentation/api-design-guidelines.html 
http://swiftweekly.cn/archive.html   一个swift开发者周刊

＊ http://wiki.jikexueyuan.com/project/swift/chapter1/02_a_swift_tour.html   极客学院翻译的英文版（更新很快）
＊＊ http://www.swiftguide.cn/   国内最强，没有之一



game dev in swift
＊＊  http://www.sprite-kit.com/tutorials/      关注spriteKit的发展动态，需要翻墙
https://www.udemy.com/rume-academy-introduction-to-spritekit-in-swift/      需翻墙


http://www.cocoachina.com/game/20150713/12528.html      SpriteKit在iOS 9和OS X 10.11中的新特性
http://www.cocoachina.com/swift/20141219/10710.html    想开发iPhone App？来看看这个6个适合新手的项目吧
http://www.cocoachina.com/game/20150908/13362.html    推荐：国外游戏开发者学习游戏设计的免费资源
《2D iOS & tvOS Games by Tutorials》  新书，2015.10.28 release

https://www.udemy.com/rume-academy-introduction-to-spritekit-in-swift/


http://www.cocoachina.com/game/20150906/13340.html  独立游戏人：像素风格游戏制作分享（很不错的像素绘画教程）


game dev resource:
http://pixeljoint.com       像素相关
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

高质量博客：
http://nshipster.cn     这个不错
http://nshipster.com  原版的

objc中国
http://objccn.io     
是https://www.objc.io 上文章的翻译

https://iosdevweekly.com   国外每周更新 内容多为这一星期里值得关注的Github项目、文章、工具等。

http://www.raywenderlich.com  很多详细又全面的教程，不容错过。

http://onevcat.com/#blog    oneV’s Den

http://blog.devtang.com      唐巧blog

http://blog.ibireme.com  YYModel系列的作者
https://github.com/ibireme

http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html
http://tech.glowing.com/cn/


编程技术：
http://www.liaoxuefeng.com          廖雪峰博客，git，js，python教程都不错


http://www.cocoachina.com/ios/20150430/11714.html      涂鸦源码
http://www.cocoachina.com/ios/20150429/11712.html      wwdc


后台server：
parse： 
https://www.parse.com/apps/quickstart?onboard=#parse_data/mobile/ios/native/existing
http://zenius.iteye.com/blog/1634906      介绍文章


代码管控：
https://www.atlassian.com/software/bitbucket/overview     Bitbucket：支持免费私有仓库


提高开发效率类：  
http://www.cocoachina.com/ios/20150717/12626.html    提高iOS开发效率的方法和工具
http://my.oschina.net/joanfen/blog/415058    我是如何收拾代码的

apple open source：
http://www.opensource.apple.com/tarballs/
https://opensource.apple.com/tarballs/objc4/

mac osx developement
https://developer.apple.com/library/mac/navigation/#       官网文档

官方进阶文档：（随意吧。。。）
http://clang.llvm.org/docs/AutomaticReferenceCounting.html    Clang 4.0 documentation

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝   4/17
推荐阅读：
http://www.cocoachina.com/ios/20150525/11919.html    iOS应用架构谈 view层的组织和调用方案

http://www.zhihu.com/question/22914651
http://www.cocoachina.com/ios/20150320/11384.html
https://developer.worldweatheronline.com
https://developer.apple.com/library/ios/recipes/xcode_help-IB_storyboard/chapters/AboutStoryboards.html#//apple_ref/doc/uid/TP40014225-CH41-SW1
http://www.cnblogs.com/panyuan520/archive/2013/03/21/2973632.html
http://programmers.stackexchange.com
http://kb.cnblogs.com/list/1019/
http://kb.cnblogs.com/page/501239/    堆栈
http://kb.cnblogs.com/page/177108/    闭包
http://www.cocoachina.com/ios/20150731/12819.html  关于iOS多线程，你看我就够了 


http://www.objc.io/issue-7/communication-patterns.html 
http://iosapp.me/blog/2014/06/09/jenkins/
http://blog.devtang.com/blog/2014/03/21/ios-weekly-4/

http://wufawei.com/2014/03/symbolicating-ios-crash-logs/

http://blog.csdn.net/yiyaaixuexi/article/details/8970734     多茜博客
http://blog.csdn.net/logcabin/article/details/8980366#comments
https://vimeo.com/62266484     UIEdgeInsets video


资源汇总：
http://www.cocoachina.com/ios/20151210/14635.html    94个iOS开发资源推荐，帮你加速应用开发


专题：

runtime：
http://www.cocoachina.com/ios/20150715/12540.html  runtime
http://www.cocoachina.com/ios/20150818/13075.html   了解方法缓存

逆向工程：
http://www.cnblogs.com/csutanyu/p/3575297.html    一些资料介绍
http://www.cocoachina.com/industry/20130624/6463.html   iOS汇编教程：ARM(1)和ARM(2)


国外文章：
https://www.bignerdranch.com/blog/leveling-up/


Core-Animation-Advanced-Techniques:
http://www.cocoachina.com/ios/20150104/10814.html
http://www.cocoachina.com/ios/20150104/10816.html

iOS应用架构谈：（不错的系列）
http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html

xcode 7
http://www.cnblogs.com/iOSv587country/p/4862989.html   使用Xcode7的Instruments检测解决iOS内存泄露

about iOS interview
http://mp.weixin.qq.com/s?__biz=MjM5OTM0MzIwMQ==&mid=404843833&idx=1&sn=ac3c7fb3b8d27de4b79f227ddf4e39b7&scene=23&srcid=0407i3FAo6TU6hhKu46t2cIG#rd  
http://blog.sunnyxx.com/2015/07/04/ios-interview/  招聘一个靠谱的 iOS   https://github.com/ChenYilong/iOSInterviewQuestions    （其他人给出答案参考：   http://www.cocoachina.com/ios/20150803/12872.html ）

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
programmer learning & for fun:
http://www.cocoachina.com/game/20160519/16341.html     一大波能提高编程技能的游戏
https://www.zhihu.com/question/37146954      GitHub 上有些什么好玩的项目？

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

7.24:
// http://www.topcss.org/?cat=96
http://www.zhihu.com/question/32063728#answer-17281564
// http://www.ui.cn/detail/26980.html

http://www.jikexueyuan.com    极客学院



8.26
http://www.cocoachina.com/ios/20150731/12819.html  多线程
http://www.cocoachina.com/ios/20150605/11990.html?utm_source=tuicool   weak

http://opensource.apple.com/tarballs/
http://blog.sunnyxx.com/2014/03/06/ios_exam_0_key/
http://tech.glowing.com/cn/method-swizzling-aop/
http://blog.csdn.net/muzhenhua/article/details/45040841  javascriptcore



＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
7/30  JSPatch
http://blog.cnbang.net/tech/2808/
http://blog.cnbang.net/tech/2855/
http://blog.cnbang.net/works/2767/
https://github.com/bang590/JSPatch
https://github.com/bang590/JSPatchConvertor  jspatch转换oc

NSString *className = NSStringFromClass([UIViewController class]);


JavaScriptCore：
JSVirtualMachine为JavaScript的运行提供了底层资源，JSContext就为其提供着运行环境，通过- (JSValue *)evaluateScript:(NSString *)script;方法就可以执行一段JavaScript脚本，
并且如果其中有方法、变量等信息都会被存储在其中以便在需要的时候使用。而JSContext的创建都是基于JSVirtualMachine：- (id)initWithVirtualMachine:(JSVirtualMachine *)virtualMachine;，
如果是使用- (id)init;进行初始化，那么在其内部会自动创建一个新的JSVirtualMachine对象然后调用前边的初始化方法。

JSValue则可以说是JavaScript和Object-C之间互换的桥梁，它提供了多种方法可以方便地把JavaScript数据类型转换成Objective-C，或者是转换过去
具体可见： http://blog.csdn.net/muzhenhua/article/details/45040841


 JSPatch 的原理就是：JS传递字符串给OC，OC通过 Runtime 接口调用和替换OC方法。这是最基础的原理
 JSPatch是通过Objective-C Runtime的接口通过字符串反射找到对应的类和方法进行调用
 
 步骤：
 1. 在OC执行JS脚本前，通过正则把所有方法调用都改成调用 __c() 函数，再执行这个JS脚本
 


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
工作时遇到的：

小数精度：  
http://www.cnblogs.com/denz/p/5330771.html    关于OC中的小数精确计算---NSDecimalNumber

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

蓝灯：
使用方法，双击EXE文件。之后设置好浏览器就可以了
火狐：进入菜单选项-高级-网络-高级设置-使用系统代理设置即可。
chrome：菜单设置-更改代理服务器设置，里面改一下即可
如果安装了switchysharp，就直接在CHROME上点击那个球，选择系统代理设置即可。


如何关闭呢？桌面右下角，右键点击关闭即可
再把上面的使用系统代理设置还原一下即可

补个使用方法，前面不能用的是你少了设置。


pro ssd 升级：
http://www.dgtle.com/portal.php?mod=view&aid=296&page=1#comments_top
https://support.apple.com/zh-cn/HT1270   官网查内详细
http://www.07net01.com/linux/Macbook_Pro_shengji_SSD_gutaiyingpan_shujuzhuanyiwanquanjiaocheng_21373_1351063375.html
http://benyouhui.it168.com/thread-1928067-1-1.html    内有查询是否系统支持sata3接口的方法
http://bbs.pceva.com.cn/forum-124-1.html  很不错的ssd硬盘研究论坛
http://v.youku.com/v_show/id_XNjg3MTQxOTU2.html?from=s1.8-1-1.2   王自如换ssd视频（好评）

制作u盘启动盘时的命令：
sudo /Applications/Install\ OS\ X\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/Capitan --applicationpath /Applications/Install\ OS\ X\ Capitan.app --nointeraction
    
    
https://support.apple.com/zh-cn/HT203207  苹果的电源线保修策略

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

临时：
http://www.babytree.com/community/group21668/topic_2111357.html#nav_title_target


http://blog.leichunfeng.com/blog/2015/06/14/objective-c-method-swizzling-best-practice/  
http://mp.weixin.qq.com/s?__biz=MzIzMzA4NjA5Mw==&mid=214119033&idx=1&sn=1c7628fb1f0367f0caf022b1ab6ff077&scene=23&srcid=10166ul9QrKKvlCS9xJYsmcH#rd
http://stackoverflow.com/questions/31935013/in-xcode-7-ios-9-application-windows-are-expected-to-have-a-root-view-controll 
http://stackoverflow.com/questions/32627519/ios-9-splash-screen-is-black
http://zhidao.baidu.com/question/264878027672910165.html?fr=iks&word=xcode7+launch+image&ie=gbk

http://www.paintcodeapp.com/news/iphone-6-screens-demystified
http://www.jianshu.com/p/83ee7ffb9d7d
http://www.cocoachina.com/ios/20150104/10816.html
https://github.com/samuelly/iOSInterviewQuestions
http://blog.sunnyxx.com/tags/iOS9/
http://blog.ibireme.com/2015/05/18/runloop/
http://www.cocoachina.com/ios/20140829/9480.html

http://www.raywenderlich.com/category/swift
http://www.raywenderlich.com/115253/swift-2-tutorial-a-quick-start
http://www.raywenderlich.com/category/sprite-kit

12/23
http://www.cocoachina.com/ios/20151127/14394.html
http://api.buzz.cn/index.php/Mpd/course?courseid=10819&paikeid=5892&from=timeline&isappinstalled=0
http://fykec.github.io/2015/12/10/iOS-Layout%20技术回顾及Masonry介绍.html?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io


16／3/9
 http://xunyanan.com/blog/2013/12/10/iosjin-jie-mian-shi-ti/
 
 http://www.jianshu.com/p/246dc6e8043a    block tips
 
 http://www.cocoachina.com/ios/20160219/15330.html    iOS/OS X内存管理(一)：基本概念与原理
 http://www.cocoachina.com/ios/20160222/15333.html    iOS/OS X 内存管理(二)：借助工具解决内存问题
 
 http://www.cocoachina.com/ios/20160223/15347.html     深入浅出--iOS的TCP/IP协议族剖析&&Socket
 
 http://www.jianshu.com/p/2463f92aae07
 http://www.liubingyang.com/like/mac-shadowsocksx.html
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
others：
http://www.miaopai.com/show/u-fOpin3o3qbeAHfGN2kFg__.htm     跑步


english：
http://www.zhihu.com/question/21454131  选择英文电台
http://www.lizhi.fm/923185/album/16534198724129691   自然拼读



stock：
http://xueqiu.com/1172522226     江渚渔樵99
http://www.guzhang.com/info/


量化分析师的Python日记